#!/bin/bash

set -eu

DOCKERFILES=""
DOCKER_BUILD_OPTION=""

VERSION=0.2.3
HUMAN_READABLE=1
TRUNC=1
QUIET=""
LIST_MATCH=1

FILTER_FROM="*"
FILTER_FROM_ID=""
FILTER_ISOLATED=""
FILTER_NONE=""

if date -f /dev/null > /dev/null 2>&1; then
  DATE_TYPE="gnu"
else
  DATE_TYPE="bsd"
fi

usage() {
cat <<DATA
Usage: docker-depot COMMAND [OPTION]
       docker-depot [ -h | --help | -v | --version ]

COMMAND:
  list    List information
  build   Build docker image

Run 'docker-depot COMMAND --help' for more information on a command.
DATA
exit 0
}

build_help() {
cat <<DATA
Usage: docker-depot build [OPTION] [IMAGE...] -- [BUILD_OPTION...]
  Build docker image

OPTION:
  -h, --help              Print usage

OPTION (filter):
  --from=FROM_IMAGE
  --from-id[=FROM_ID]
  --isolated
  --none


IMAGE:
  Docker image names. Supports glob pattern.
  e.g. name, name:tag, "*", "*:*"

BUILD_OPTION:
  Docker build option.

DATA
exit 0
}

list_help() {
cat <<DATA
Usage: docker-depot list [OPTION] [IMAGE...]
  Build docker image

IMAGE:
  Docker image names. Supports glob pattern.
  e.g. name, name:tag, "*", "*:*"

OPTION:
  -m, --machine-readable
  -v, --invert            List unmatched image
      --no-trunc          Don't truncate output
  -q, --quiet             Only show numeric IDs
  -i, --image             Only show IMAGE
  -n, --name              Only show NAME (without tag)
  -h, --help              Print usage

OPTION (filter):
  --from=FROM_IMAGE
  --from-id[=FROM_ID]
  --isolated
  --none

DATA
exit 0
}

abort() {
  echo "$1" >&2
  exit 1
}

parse_filter_option() {
  case $1 in
    --from | --from=*)
      local from=${1:7}
      [[ $from ]] || abort "--from not specified FROM_IMAGE"
      [[ $from = *:* ]] && FILTER_FROM=$from || FILTER_FROM="$from:latest"
      ;;
    --from-id | --from-id=*)
      local from_id=${1:10}
      if [[ $from_id ]]; then
        FILTER_FROM_ID="$from_id"
      else
        FILTER_FROM_ID="??" # To match except 0.
      fi
      ;;
    --isolated) FILTER_ISOLATED=1 ;;
    --none) FILTER_NONE=1 ;;
    *) return 1
  esac
  return 0
}

build() {
  local names=() images=()

  while (( $# > 0 )); do
    if ! parse_filter_option "$1"; then
      case $1 in
        --help) build_help ;;
        --) break ;;
        -*) abort "No such option" ;;
        *) break
      esac
    fi
    shift
  done

  while (( $# > 0 )); do
    case $1 in
      --) shift; break ;;
      -*) abort "Invalid image name" ;;
      *) names[${#names[@]}]=$1 ;;
    esac
    shift
  done

  if ! (( ${#names[@]} )); then
    if [[ $FILTER_FROM != "*" || $FILTER_FROM_ID || $FILTER_ISOLATED || $FILTER_NONE ]]; then
      names=("*:*")
    else
      abort "build is required filter options or name"
    fi
  fi

  while IFS="|" read -r image _; do
    images[${#images[@]}]=$image
  done < <(get_list "${names[@]}")

  if (( ${#images[@]} )); then
    for image in "${images[@]}"; do
      local name=${image%:*}
      local tag=${image#*:}
      cd "$DOCKERFILES/$name/$tag"
      # shellcheck disable=SC2086
      docker build -t "$name:$tag" ${DOCKER_BUILD_OPTION:-} "$@" ./
    done
  fi
}

list() {
  while (( $# > 0 )); do
    if ! parse_filter_option "$1"; then
      case $1 in
        -m | --machine-readable) HUMAN_READABLE="" ;;
        -q | --quiet) QUIET="id" ;;
        -n | --name) QUIET="name" ;;
        -i | --image) QUIET="image" ;;
        -v | --invert) LIST_MATCH=0 ;;
        --no-trunc) TRUNC="" ;;
        --help) list_help ;;
        -*) abort "No such option" ;;
        *) break
      esac
    fi
    shift
  done

  local names=()
  while (( $# > 0 )); do
    case $1 in
      -*) abort "Invalid image name" ;;
      *) names[${#names[@]}]=$1 ;;
    esac
    shift
  done

  if ! (( ${#names[@]} )); then
    names=("*:*")
  fi

  case $QUIET in
    id)
      while IFS="|" read -r _ id _; do
        echo "$id"
      done < <(get_list "${names[@]}")
      ;;
    name)
      while IFS="|" read -r image _; do
        echo "${image%:*}"
      done < <(get_list "${names[@]}") | uniq
      ;;
    image)
      while IFS="|" read -r image _; do
        echo "$image"
      done < <(get_list "${names[@]}")
      ;;
    *)
      (
        if [[ $HUMAN_READABLE ]]; then
          echo "IMAGE|IMAGE ID|FROM IMAGE|FROM ID|CREATED|PILE SIZE|VIRTUAL SIZE"
        fi
        while IFS="|" read -r image id from from_id created psize vsize; do
          local data
          data=(
            "$image"
            "$(disp_id "$id")"
            "$from"
            "$(disp_id "$from_id")"
            "$(disp_date "$created")"
            "$(disp_size "$psize")"
            "$(disp_size "$vsize")"
          )
          IFS="|"
          echo "${data[*]}"
        done < <(get_list "${names[@]}")
      ) | table "|" # same as column -t -s "|""
    esac
}

table() {
  local text fields field index len=()

  text=$(cat)

  while IFS="$1" read -ra fields; do
    index=0
    for field in "${fields[@]}"; do
      (( ${#field} > ${len[$index]:-0} )) && len[$index]=${#field}
      index=$((index+1))
    done
  done <<< "$text"

  local format=${len[*]}
  format="%-${format// /s  %-}s"
  while IFS="$1" read -ra fields; do
    # shellcheck disable=SC2059
    printf "$format\n" "${fields[@]}"
  done <<< "$text"
}

completions() {
  if (( $# == 0 )); then
    echo "build list"
    return 0
  fi

  local command=$1
  shift
  if [[ $command =~ ^build|list$ ]]; then
    echo "--from --from-id --isolated --none"

    while (( $# > 0 )); do
      if ! parse_filter_option "$1"; then
        case $1 in
          --) break ;;
          *) break
        esac
      fi
      shift
    done

    while IFS="|" read -r image _; do
      echo "$image"
    done < <(get_list)
    return 0
  fi
}

disp_id() {
  if [[ ! $1 ]]; then
    echo "<none>"
  elif [[ $1 = 0 ]]; then
    echo "<isolated>"
  else
    if [[ $TRUNC ]]; then
      echo "${1:0:12}"
    else
      echo "$1"
    fi
  fi
}

disp_date() {
  if [[ ! $1 ]]; then
    echo "<none>"
  elif [[ $HUMAN_READABLE ]]; then
    local format=+"%Y-%m-%d %H:%M:%S"
    case $DATE_TYPE in
      gnu) date -d "$1" "$format" ;;
      bsd) date -j -f "%Y-%m-%dT%H:%M:%S %z" "${1%.*} +0000" "$format" ;;
      *) abort "Unknown DATE_TYPE '$DATE_TYPE'"
    esac
  else
    echo "${1%.*}Z"
  fi
}

disp_size() {
  if [[ ! $1 ]]; then
    echo "<none>"
  elif [[ $HUMAN_READABLE ]]; then
    if (( $1 > 1000000000)); then
      echo "$(bc < <(echo "scale=2; $1 / 1000000000")) GB"
    elif (( $1 > 1000000)); then
      echo "$(bc < <(echo "scale=2; $1 / 1000000")) MB"
    elif (( $1 > 1000)); then
      echo "$(bc < <(echo "scale=2; $1 / 1000")) KB"
    else
      echo "$1 B"
    fi
  else
    echo "$1"
  fi
}

find_defined_images() {
  if [[ $# = 0 ]]; then
    find_defined_images "*:*"
    return
  fi

  while IFS= read -r line; do
    local path=${line:2}
    path=${path%/*}
    local name=${path%/*}
    local tag=${path##*/}

    local match=0
    for image in "$@"; do
      [[ $image = *:* ]] || image="$image:latest"

      # shellcheck disable=SC2053
      if [[ "$name:$tag" = $image ]]; then
        match=1
        break
      fi
    done
    if ((match == LIST_MATCH)); then
      echo "$name:$tag"
    fi
  done < <(cd "$DOCKERFILES"; find -L . -mindepth 3 -name Dockerfile | sort)
}

get_list() {
  # 0:id 1:name 2:tag 3:parent 4:created 5:virtualsize
  docker_data=$(load_docker_data)

  local data
  if [[ $docker_data ]]; then
    while read -ra data; do
      declare $(hash_key hierarchies "${data[0]}")="${data[3]}"
      if [[ ${data[1]} != "<none>" ]]; then
        declare $(hash_key by_image "${data[1]}:${data[2]}")="${data[*]}"
      fi
    done <<< "$docker_data"
  fi

  while read -r image; do
    local id="" parent_id="" from="" from_id="" created="" vsize="" psize=""

    from=$(get_base_image "$image")

    local fields
    fields=$(hash_get by_image "$image")
    if [[ $fields ]]; then
      fields=($fields)
      id=${fields[0]}
      parent_id=${fields[3]}
      created=${fields[4]}
      vsize=${fields[5]}

      local from_data
      from_data=($(hash_get by_image "$from"))
      from_id=$parent_id

      while [[ $from_id != 0 ]]; do
        [[ $from_id = "${from_data[0]}" ]] && break
        from_id=$(hash_get hierarchies "$from_id")
      done

      local from_size=0
      if [[ $from_id != 0 ]]; then
        from_size=${from_data[5]}
      fi
      psize=$((vsize - from_size))
    fi

    local disp=""
    # shellcheck disable=SC2053
    if [[ $from = $FILTER_FROM ]]; then
      if [[ $FILTER_FROM_ID || $FILTER_NONE || $FILTER_ISOLATED ]]; then
        [[ $from_id = $FILTER_FROM_ID* && $FILTER_FROM_ID ]] && disp=1
        [[ $from_id = "" && $FILTER_NONE ]] && disp=1
        [[ $from_id = 0 && $FILTER_ISOLATED ]] && disp=1
      else
        disp=1
      fi
    fi

    if [[ $disp ]]; then
      echo "$image|$id|$from|$from_id|$created|$psize|$vsize"
    fi
  done < <(find_defined_images "$@")
}

load_docker_data() {
  local images inspect

  images=$(while read -r name tag id _; do
    echo "$id $name $tag"
  done < <(docker images -a --no-trunc | tail -n +2) | sort)

  [[ $images ]] || return 0

  local ids=()
  while read -r id _; do
    ids[${#ids[@]}]=$id
  done <<< "$images"

  local format='{{.Id}}|{{.Parent}}|{{.Created}}|{{.VirtualSize | printf "%.0f"}}'
  inspect=$(while IFS="|" read -r id parent created virtual_size _; do
    [[ $parent ]] || parent=0
    echo "$id $parent $created $virtual_size"
  done < <(docker inspect -f "$format" "${ids[@]}") | sort)

  # 0:id 1:name 2:tag 3:parent 4:created 5:virtualsize
  join <(echo "$images") <(echo "$inspect")
}

get_base_image() {
  local file="$DOCKERFILES/${1/://}/Dockerfile"
  local line from

  line=$(grep "FROM " "$file" | tail -n 1)
  from=${line##* }
  [[ $from = *:* ]] && echo "$from" || echo "$from:latest"
}

load_depotrc() {
  local dir=$1

  while [[ $dir ]]; do
    if [[ -e "$dir/.depotrc" ]]; then
      DOCKERFILES=$dir
      . "$dir/.depotrc"
      return 0
    fi
    dir=${dir%/*}
    [[ $dir = "$HOME" ]] && return 0
  done
 return 0
}

hash_key() {
  local key
  key=$(base64 <<< $2)
  key=${key//=/_e}
  key=${key//+/_p}
  key=${key//-/_m}
  key=${key//$'\n'/}
  echo "$1_$key"
}

hash_get() {
  local name
  name=$(hash_key "$1" "$2")
  echo "${!name:-}"
}

load_depotrc "$PWD"
[[ -e "$HOME/.depotrc" ]] && . "$HOME/.depotrc"

[[ $DOCKERFILES ]] || abort "Not found dockerfiles directory"

[[ $# = 0 ]] && usage

case $1 in
  -h | --help) usage ;;
  -v | --version) echo $VERSION; exit 0 ;;
  build) build "${@:2}" ;;
  list) list "${@:2}" ;;
  completions) completions "${@:2}" ;;
  *) abort "No such command"
esac
